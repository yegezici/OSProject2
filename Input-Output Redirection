int redirect(char *args[], int background, char *envPath) { /*checks for any redirection command and execuate if exists*/

    /*find any redirect arg if exists*/
    char *args_clones[CHAR_LIMIT / 2 + 1];
    int i = 0, ptr1 = 0, ptr2 = 0, check=0;
    int size = sizeof args
    for(i; i< size;i++) {
        if(strcmp("<", args[i]) == 0 ||strcmp(">>", args[i]) == 0 ||
           strcmp("2>", args[i]) == 0 || strcmp(">", args[i]) == 0 ){
            check =1;
            break;
        }
    }
/*    while (args[i] != NULL) {
        if (strcmp("<", args[i]) == 0 || strcmp(">>", args[i]) == 0 ||
            strcmp("2>", args[i]) == 0 || strcmp(">", args[i]) == 0) { /*check if there is any redirection command
            flag = 1;
            break;
        }
        i++;
    } */

    if (args[i] == NULL){ /*return 0 if there is no redirection command*/
        return 0;
    }

    if(args[i+1] == NULL){
        fprintf(stdout,"Missing argument.\n");
    }

    pid_t pid = fork();
    if (pid < 0)
        fprintf(stderr, "Fork failed!\n");

    if (pid == 0) {
        if(strcmp(">", args[i]) == 0){
            int fd;
            args[i]=NULL;
            fd = open(args[i+1], O_WRONLY | O_TRUNC | O_CREAT, 0644);
            dup2(fd, STDOUT_FILENO);
            close(fd);

        }else if(strcmp(">>", args[i]) == 0){
            int fd;
            args[i]=NULL;
            fd = open(args[i+1], O_WRONLY | O_APPEND | O_CREAT, 0644);
            dup2(fd, STDOUT_FILENO);
            close(fd);

        }else if(strcmp("2>", args[i]) == 0){
            int fd;
            fd = open(args[i+1], O_WRONLY | O_APPEND | O_CREAT, 0644);
            dup2(fd, STDERR_FILENO);
            close(fd);

        }else if(strcmp("<", args[i]) == 0){
            if(args[i+2]!= NULL && strcmp(">", args[i+2]) == 0){
                fflush(stdout);
                if(args[i+3] == NULL){
                    fprintf(stdout, "Missing argument!\n");
                    return 0;
                }
                int fd, fd2;
                fd = open(args[i+1], O_RDONLY, 0644);
                fd2 = open(args[i+3],O_WRONLY | O_TRUNC | O_CREAT, 0644);
                dup2(fd2, STDOUT_FILENO);
                dup2(fd, STDIN_FILENO);
                close(fd2);
                args[i]=NULL;
            }else{
                int fd;
                args[i]=NULL;
                fd = open(args[i+1], O_RDONLY, 0644);
                dup2(fd, STDIN_FILENO);
                close(fd);
            }
        }
/*else if (strcmp("<", args[i]) == 0) {
    if (args[i + 2] != NULL && strcmp(">", args[i + 2]) == 0) {
        fflush(stdout);
        if (args[i + 3] == NULL) {
            fprintf(stdout, "Missing argument!\n");
            return 0;
        }
        int fd_in, fd_out;
        fd_in = open(args[i + 1], O_RDONLY);
        if (fd_in < 0) {
            perror("Failed to open input file");
            return 0;
        }
        fd_out = open(args[i + 3], O_WRONLY | O_TRUNC | O_CREAT, 0644);
        if (fd_out < 0) {
            perror("Failed to open output file");
            close(fd_in);
            return 0;
        }
        dup2(fd_in, STDIN_FILENO);
        dup2(fd_out, STDOUT_FILENO);
        close(fd_in);
        close(fd_out);
        args[i] = NULL;
    } else {
        int fd_in;
        args[i] = NULL;
        fd_in = open(args[i + 1], O_RDONLY);
        if (fd_in < 0) {
            perror("Failed to open input file");
            return 0;
        }
        dup2(fd_in, STDIN_FILENO);
        close(fd_in);
    }
}*/
